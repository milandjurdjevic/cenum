using System.CodeDom.Compiler;
using System.Collections.Immutable;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Cenum;

[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator
{
    private const string Namespace = "Cenum";
    private const string AttributeClassName = "EnumerationAttribute";
    private const string AttributeMetadataName = $"{Namespace}.{AttributeClassName}";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(GenerateOutput);

        IncrementalValueProvider<ImmutableArray<ITypeSymbol?>> syntaxProvider = context.SyntaxProvider
            .ForAttributeWithMetadataName(AttributeMetadataName, Filter, Transform)
            .Collect();

        context.RegisterSourceOutput(syntaxProvider, GenerateSourceOutput);
    }

    private static ITypeSymbol? Transform(GeneratorAttributeSyntaxContext context, CancellationToken token)
    {
        return context.TargetSymbol as ITypeSymbol;
    }

    private static bool Filter(SyntaxNode node, CancellationToken token)
    {
        return node is ClassDeclarationSyntax classDeclaration &&
               classDeclaration.Modifiers.Any(SyntaxKind.PartialKeyword) &&
               !classDeclaration.Modifiers.Any(SyntaxKind.StaticKeyword) &&
               classDeclaration.Parent is not ClassDeclarationSyntax;
    }

    private static void GenerateOutput(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource($"{AttributeMetadataName}.g.cs",
            // language=C#
            $$"""
              // <auto-generated />
              namespace {{Namespace}}
              {
                  [global::System.AttributeUsage(AttributeTargets.Class, Inherited = false)]
                  public sealed class {{AttributeClassName}} : global::System.Attribute
                  {
                  }
              }
              """);
    }

    private static void GenerateSourceOutput(SourceProductionContext context, ImmutableArray<ITypeSymbol?> symbols)
    {
        foreach (ITypeSymbol symbol in symbols.OfType<ITypeSymbol>())
        {
            using IndentedTextWriter writer = new(new StringWriter());

            writer.WriteLine("// <auto-generated />");

            bool containingNamespaceIsGlobal = symbol.ContainingNamespace.IsGlobalNamespace;

            if (!containingNamespaceIsGlobal)
            {
                writer.WriteLine($"namespace {symbol.ContainingNamespace.ToDisplayString()}");
                writer.WriteLine('{');
                writer.Indent++;
            }

            string accessibility = symbol.DeclaredAccessibility.ToString().ToLowerInvariant();
            string symbolName = symbol.Name;

            writer.WriteLine($"{accessibility} partial class {symbolName}");
            writer.WriteLine('{');
            writer.Indent++;
            writer.WriteLine($"public static global::System.Collections.Generic.IEnumerable<{symbolName}> Enumerate()");
            writer.WriteLine('{');
            writer.Indent++;

            List<string> fields = symbol.GetMembers()
                .OfType<IFieldSymbol>()
                .Where(field =>
                    field is { IsStatic: true, DeclaredAccessibility: Accessibility.Public, IsReadOnly: true }
                    && SymbolEqualityComparer.Default.Equals(field.Type, symbol))
                .Select(field => field.Name)
                .ToList();

            if (fields.Count > 0)
            {
                foreach (string? member in fields)
                {
                    writer.WriteLine($"yield return {member};");
                }
            }
            else
            {
                writer.WriteLine($"return global::System.Linq.Enumerable.Empty<{symbolName}>()");
            }

            writer.Indent--;
            writer.WriteLine('}');
            writer.Indent--;
            writer.WriteLine('}');

            if (!containingNamespaceIsGlobal)
            {
                writer.Indent--;
                writer.WriteLine('}');
            }

            string hint = containingNamespaceIsGlobal
                ? $"{symbolName}.g.cs"
                : $"{symbol.ContainingNamespace.ToDisplayString()}.{symbolName}.g.cs";

            context.AddSource(hint, writer.InnerWriter.ToString());
        }
    }
}